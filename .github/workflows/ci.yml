# name: Video Conversion CI

# on:
#   workflow_dispatch:
  

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20'
#         cache: 'npm'

#     # Install system dependencies required by Playwright
#     - name: Cache apt packages
#       uses: actions/cache@v3
#       with:
#         path: /var/cache/apt
#         key: ${{ runner.os }}-apt-${{ hashFiles('**/*.yml') }}

#     - name: Install npm dependencies
#       run: npm ci && npm i aws-sdk

#     - name: Cache Playwright browsers
#       uses: actions/cache@v3
#       with:
#         path: ~/.cache/ms-playwright
#         key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}


#     # Verify FFmpeg installation (from @ffmpeg-installer/ffmpeg)
#     - name: Verify FFmpeg
#       run: echo "Hii"


#   # New job to test video conversion with hardcoded inputs
#   video-conversion-test:
#     runs-on: ubuntu-latest
#     needs: build-and-test

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: '20'
#         cache: 'npm'

#     # Install system dependencies required by Playwright
#     - name: Install system dependencies
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y \
#           libnss3 \
#           libnspr4 \
#           libatk1.0-0 \
#           libatk-bridge2.0-0 \
#           libcups2 \
#           libdrm2 \
#           libgtk-3-0 \
#           libgbm1 \
#           libasound2t64

#     - name: Install npm dependencies
#       run: npm ci && npm i aws-sdk

#     - name: Install Playwright browsers
#       run: npx playwright install --with-deps

#     - name: Create output directory
#       run: mkdir -p public

#     - name: ⚙️ Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-south-1
        
#     - name: 🧪 Test AWS Connection
#       run: |
#         aws sts get-caller-identity
#         aws s3 ls s3://magicmotion-export/ --max-items 5 || echo "Bucket test completed"
#     - name: Run Video Converter SDK with hardcoded inputs
#       env:
#         S3_BUCKET_NAME: magicmotion-export
#       run: |
#         echo "🎬 Running Video Converter SDK..."
#         echo "📝 Using hardcoded inputs from basic-usage.js"
#         cd video-converter-sdk
#         timeout 600 node examples/basic-usage.js || echo "Video conversion completed or timed out"

#     - name: 📤 Upload Results
#       uses: actions/upload-artifact@v4
#       with:
#         name: converted-videos-result
#         path: |
#           public/
#         retention-days: 1
name: Test MagicRoll API
on:
  workflow_dispatch:
    inputs:
      project_id:
        required: true
        type: string
        description: 'Project ID to fetch from API'
        default: 'ae0fb7f9-0ed4-45c4-a187-b3f0b08a360f'

jobs:
  convert-magic-motion:
    runs-on: ubuntu-latest
    outputs:
      api-data: ${{ steps.fetch-api.outputs.response }}
    steps:
    - name: 📦 Checkout
      uses: actions/checkout@v4
        
    # STEP 1: Fetch data from MagicRoll API using http-request-action
    - name: 🌐 Fetch Project Data from MagicRoll API
      id: fetch-api
      uses: fjogeleit/http-request-action@v1
      with:
        url: "https://api.magicrollai.buzz/api/v1/project/${{ inputs.project_id }}/editdata"
        method: "GET"
        customHeaders: '{"Content-Type": "application/json", "Authorization": "Token ${{ secrets.MAGICROLL_API_KEY }}"}'
        
    - name: 📊 Display API Response
      run: |
        echo "🚀 API GET test completed!"
        echo "📋 Project ID: ${{ inputs.project_id }}"
        echo "🌍 API URL: https://api.magicrollai.buzz/api/v1/project/${{ inputs.project_id }}/editdata"
        echo "📊 Response Status: ${{ steps.fetch-api.outputs.statusCode }}"
        
        echo ""
        echo "📤 API Response:"
        echo '${{ steps.fetch-api.outputs.response }}' | jq '.' || echo '${{ steps.fetch-api.outputs.response }}'
        
        echo ""
        echo "📋 Response Summary:"
        echo '${{ steps.fetch-api.outputs.response }}' | jq '{
          project_id: .project_id,
          magicmotion_count: (.magicmotion | length),
          motion_graphics_count: (.motion_graphics_data | length),
          enable_magic_motion: .enable_magic_motion
        }' || echo "Could not parse response structure"